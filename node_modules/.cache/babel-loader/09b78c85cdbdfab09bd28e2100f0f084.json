{"ast":null,"code":"/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v5.2.10\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"whatInput\", [], factory);else if (typeof exports === 'object') exports[\"whatInput\"] = factory();else root[\"whatInput\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }\n    /************************************************************************/\n\n    /******/\n    ([\n    /* 0 */\n\n    /***/\n    function (module, exports) {\n      'use strict';\n\n      module.exports = function () {\n        /*\n         * bail out if there is no document or window\n         * (i.e. in a node/non-DOM environment)\n         *\n         * Return a stubbed API instead\n         */\n        if (typeof document === 'undefined' || typeof window === 'undefined') {\n          return {\n            // always return \"initial\" because no interaction will ever be detected\n            ask: function ask() {\n              return 'initial';\n            },\n            // always return null\n            element: function element() {\n              return null;\n            },\n            // no-op\n            ignoreKeys: function ignoreKeys() {},\n            // no-op\n            specificKeys: function specificKeys() {},\n            // no-op\n            registerOnChange: function registerOnChange() {},\n            // no-op\n            unRegisterOnChange: function unRegisterOnChange() {}\n          };\n        }\n        /*\n         * variables\n         */\n        // cache document.documentElement\n\n\n        var docElem = document.documentElement; // currently focused dom element\n\n        var currentElement = null; // last used input type\n\n        var currentInput = 'initial'; // last used input intent\n\n        var currentIntent = currentInput; // UNIX timestamp of current event\n\n        var currentTimestamp = Date.now(); // check for a `data-whatpersist` attribute on either the `html` or `body` elements, defaults to `true`\n\n        var shouldPersist = 'false'; // form input types\n\n        var formInputs = ['button', 'input', 'select', 'textarea']; // empty array for holding callback functions\n\n        var functionList = []; // list of modifier keys commonly used with the mouse and\n        // can be safely ignored to prevent false keyboard detection\n\n        var ignoreMap = [16, // shift\n        17, // control\n        18, // alt\n        91, // Windows key / left Apple cmd\n        93 // Windows menu / right Apple cmd\n        ];\n        var specificMap = []; // mapping of events to input types\n\n        var inputMap = {\n          keydown: 'keyboard',\n          keyup: 'keyboard',\n          mousedown: 'mouse',\n          mousemove: 'mouse',\n          MSPointerDown: 'pointer',\n          MSPointerMove: 'pointer',\n          pointerdown: 'pointer',\n          pointermove: 'pointer',\n          touchstart: 'touch',\n          touchend: 'touch' // boolean: true if the page is being scrolled\n\n        };\n        var isScrolling = false; // store current mouse position\n\n        var mousePos = {\n          x: null,\n          y: null // map of IE 10 pointer events\n\n        };\n        var pointerMap = {\n          2: 'touch',\n          3: 'touch',\n          // treat pen like touch\n          4: 'mouse' // check support for passive event listeners\n\n        };\n        var supportsPassive = false;\n\n        try {\n          var opts = Object.defineProperty({}, 'passive', {\n            get: function get() {\n              supportsPassive = true;\n            }\n          });\n          window.addEventListener('test', null, opts);\n        } catch (e) {} // fail silently\n\n        /*\n         * set up\n         */\n\n\n        var setUp = function setUp() {\n          // add correct mouse wheel event mapping to `inputMap`\n          inputMap[detectWheel()] = 'mouse';\n          addListeners();\n        };\n        /*\n         * events\n         */\n\n\n        var addListeners = function addListeners() {\n          // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n          // can only demonstrate potential, but not actual, interaction\n          // and are treated separately\n          var options = supportsPassive ? {\n            passive: true\n          } : false;\n          document.addEventListener('DOMContentLoaded', setPersist); // pointer events (mouse, pen, touch)\n\n          if (window.PointerEvent) {\n            window.addEventListener('pointerdown', setInput);\n            window.addEventListener('pointermove', setIntent);\n          } else if (window.MSPointerEvent) {\n            window.addEventListener('MSPointerDown', setInput);\n            window.addEventListener('MSPointerMove', setIntent);\n          } else {\n            // mouse events\n            window.addEventListener('mousedown', setInput);\n            window.addEventListener('mousemove', setIntent); // touch events\n\n            if ('ontouchstart' in window) {\n              window.addEventListener('touchstart', setInput, options);\n              window.addEventListener('touchend', setInput);\n            }\n          } // mouse wheel\n\n\n          window.addEventListener(detectWheel(), setIntent, options); // keyboard events\n\n          window.addEventListener('keydown', setInput);\n          window.addEventListener('keyup', setInput); // focus events\n\n          window.addEventListener('focusin', setElement);\n          window.addEventListener('focusout', clearElement);\n        }; // checks if input persistence should happen and\n        // get saved state from session storage if true (defaults to `false`)\n\n\n        var setPersist = function setPersist() {\n          shouldPersist = !(docElem.getAttribute('data-whatpersist') || document.body.getAttribute('data-whatpersist') === 'false');\n\n          if (shouldPersist) {\n            // check for session variables and use if available\n            try {\n              if (window.sessionStorage.getItem('what-input')) {\n                currentInput = window.sessionStorage.getItem('what-input');\n              }\n\n              if (window.sessionStorage.getItem('what-intent')) {\n                currentIntent = window.sessionStorage.getItem('what-intent');\n              }\n            } catch (e) {// fail silently\n            }\n          } // always run these so at least `initial` state is set\n\n\n          doUpdate('input');\n          doUpdate('intent');\n        }; // checks conditions before updating new input\n\n\n        var setInput = function setInput(event) {\n          var eventKey = event.which;\n          var value = inputMap[event.type];\n\n          if (value === 'pointer') {\n            value = pointerType(event);\n          }\n\n          var ignoreMatch = !specificMap.length && ignoreMap.indexOf(eventKey) === -1;\n          var specificMatch = specificMap.length && specificMap.indexOf(eventKey) !== -1;\n          var shouldUpdate = value === 'keyboard' && eventKey && (ignoreMatch || specificMatch) || value === 'mouse' || value === 'touch'; // prevent touch detection from being overridden by event execution order\n\n          if (validateTouch(value)) {\n            shouldUpdate = false;\n          }\n\n          if (shouldUpdate && currentInput !== value) {\n            currentInput = value;\n            persistInput('input', currentInput);\n            doUpdate('input');\n          }\n\n          if (shouldUpdate && currentIntent !== value) {\n            // preserve intent for keyboard interaction with form fields\n            var activeElem = document.activeElement;\n            var notFormInput = activeElem && activeElem.nodeName && (formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1 || activeElem.nodeName.toLowerCase() === 'button' && !checkClosest(activeElem, 'form'));\n\n            if (notFormInput) {\n              currentIntent = value;\n              persistInput('intent', currentIntent);\n              doUpdate('intent');\n            }\n          }\n        }; // updates the doc and `inputTypes` array with new input\n\n\n        var doUpdate = function doUpdate(which) {\n          docElem.setAttribute('data-what' + which, which === 'input' ? currentInput : currentIntent);\n          fireFunctions(which);\n        }; // updates input intent for `mousemove` and `pointermove`\n\n\n        var setIntent = function setIntent(event) {\n          var value = inputMap[event.type];\n\n          if (value === 'pointer') {\n            value = pointerType(event);\n          } // test to see if `mousemove` happened relative to the screen to detect scrolling versus mousemove\n\n\n          detectScrolling(event); // only execute if scrolling isn't happening\n\n          if ((!isScrolling && !validateTouch(value) || isScrolling && event.type === 'wheel' || event.type === 'mousewheel' || event.type === 'DOMMouseScroll') && currentIntent !== value) {\n            currentIntent = value;\n            persistInput('intent', currentIntent);\n            doUpdate('intent');\n          }\n        };\n\n        var setElement = function setElement(event) {\n          if (!event.target.nodeName) {\n            // If nodeName is undefined, clear the element\n            // This can happen if click inside an <svg> element.\n            clearElement();\n            return;\n          }\n\n          currentElement = event.target.nodeName.toLowerCase();\n          docElem.setAttribute('data-whatelement', currentElement);\n\n          if (event.target.classList && event.target.classList.length) {\n            docElem.setAttribute('data-whatclasses', event.target.classList.toString().replace(' ', ','));\n          }\n        };\n\n        var clearElement = function clearElement() {\n          currentElement = null;\n          docElem.removeAttribute('data-whatelement');\n          docElem.removeAttribute('data-whatclasses');\n        };\n\n        var persistInput = function persistInput(which, value) {\n          if (shouldPersist) {\n            try {\n              window.sessionStorage.setItem('what-' + which, value);\n            } catch (e) {// fail silently\n            }\n          }\n        };\n        /*\n         * utilities\n         */\n\n\n        var pointerType = function pointerType(event) {\n          if (typeof event.pointerType === 'number') {\n            return pointerMap[event.pointerType];\n          } else {\n            // treat pen like touch\n            return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n          }\n        }; // prevent touch detection from being overridden by event execution order\n\n\n        var validateTouch = function validateTouch(value) {\n          var timestamp = Date.now();\n          var touchIsValid = value === 'mouse' && currentInput === 'touch' && timestamp - currentTimestamp < 200;\n          currentTimestamp = timestamp;\n          return touchIsValid;\n        }; // detect version of mouse wheel event to use\n        // via https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\n\n\n        var detectWheel = function detectWheel() {\n          var wheelType = null; // Modern browsers support \"wheel\"\n\n          if ('onwheel' in document.createElement('div')) {\n            wheelType = 'wheel';\n          } else {\n            // Webkit and IE support at least \"mousewheel\"\n            // or assume that remaining browsers are older Firefox\n            wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n          }\n\n          return wheelType;\n        }; // runs callback functions\n\n\n        var fireFunctions = function fireFunctions(type) {\n          for (var i = 0, len = functionList.length; i < len; i++) {\n            if (functionList[i].type === type) {\n              functionList[i].fn.call(undefined, type === 'input' ? currentInput : currentIntent);\n            }\n          }\n        }; // finds matching element in an object\n\n\n        var objPos = function objPos(match) {\n          for (var i = 0, len = functionList.length; i < len; i++) {\n            if (functionList[i].fn === match) {\n              return i;\n            }\n          }\n        };\n\n        var detectScrolling = function detectScrolling(event) {\n          if (mousePos.x !== event.screenX || mousePos.y !== event.screenY) {\n            isScrolling = false;\n            mousePos.x = event.screenX;\n            mousePos.y = event.screenY;\n          } else {\n            isScrolling = true;\n          }\n        }; // manual version of `closest()`\n\n\n        var checkClosest = function checkClosest(elem, tag) {\n          var ElementPrototype = window.Element.prototype;\n\n          if (!ElementPrototype.matches) {\n            ElementPrototype.matches = ElementPrototype.msMatchesSelector || ElementPrototype.webkitMatchesSelector;\n          }\n\n          if (!ElementPrototype.closest) {\n            do {\n              if (elem.matches(tag)) {\n                return elem;\n              }\n\n              elem = elem.parentElement || elem.parentNode;\n            } while (elem !== null && elem.nodeType === 1);\n\n            return null;\n          } else {\n            return elem.closest(tag);\n          }\n        };\n        /*\n         * init\n         */\n        // don't start script unless browser cuts the mustard\n        // (also passes if polyfills are used)\n\n\n        if ('addEventListener' in window && Array.prototype.indexOf) {\n          setUp();\n        }\n        /*\n         * api\n         */\n\n\n        return {\n          // returns string: the current input type\n          // opt: 'intent'|'input'\n          // 'input' (default): returns the same value as the `data-whatinput` attribute\n          // 'intent': includes `data-whatintent` value if it's different than `data-whatinput`\n          ask: function ask(opt) {\n            return opt === 'intent' ? currentIntent : currentInput;\n          },\n          // returns string: the currently focused element or null\n          element: function element() {\n            return currentElement;\n          },\n          // overwrites ignored keys with provided array\n          ignoreKeys: function ignoreKeys(arr) {\n            ignoreMap = arr;\n          },\n          // overwrites specific char keys to update on\n          specificKeys: function specificKeys(arr) {\n            specificMap = arr;\n          },\n          // attach functions to input and intent \"events\"\n          // funct: function to fire on change\n          // eventType: 'input'|'intent'\n          registerOnChange: function registerOnChange(fn, eventType) {\n            functionList.push({\n              fn: fn,\n              type: eventType || 'input'\n            });\n          },\n          unRegisterOnChange: function unRegisterOnChange(fn) {\n            var position = objPos(fn);\n\n            if (position || position === 0) {\n              functionList.splice(position, 1);\n            }\n          },\n          clearStorage: function clearStorage() {\n            window.sessionStorage.clear();\n          }\n        };\n      }();\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});\n\n;","map":{"version":3,"sources":["/home/sme777/Desktop/popDNA/node_modules/what-input/dist/what-input.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","document","window","ask","element","ignoreKeys","specificKeys","registerOnChange","unRegisterOnChange","docElem","documentElement","currentElement","currentInput","currentIntent","currentTimestamp","Date","now","shouldPersist","formInputs","functionList","ignoreMap","specificMap","inputMap","keydown","keyup","mousedown","mousemove","MSPointerDown","MSPointerMove","pointerdown","pointermove","touchstart","touchend","isScrolling","mousePos","x","y","pointerMap","supportsPassive","opts","Object","defineProperty","get","addEventListener","e","setUp","detectWheel","addListeners","options","passive","setPersist","PointerEvent","setInput","setIntent","MSPointerEvent","setElement","clearElement","getAttribute","body","sessionStorage","getItem","doUpdate","event","eventKey","which","value","type","pointerType","ignoreMatch","length","indexOf","specificMatch","shouldUpdate","validateTouch","persistInput","activeElem","activeElement","notFormInput","nodeName","toLowerCase","checkClosest","setAttribute","fireFunctions","detectScrolling","target","classList","toString","replace","removeAttribute","setItem","timestamp","touchIsValid","wheelType","createElement","onmousewheel","undefined","i","len","fn","objPos","match","screenX","screenY","elem","tag","ElementPrototype","Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","parentElement","parentNode","nodeType","Array","opt","arr","eventType","push","position","splice","clearStorage","clear"],"mappings":"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","sourcesContent":["/**\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\n * @version v5.2.10\n * @link https://github.com/ten1seven/what-input\n * @license MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"whatInput\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"whatInput\"] = factory();\n\telse\n\t\troot[\"whatInput\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n\t'use strict';\n\n\tmodule.exports = function () {\n\t  /*\n\t   * bail out if there is no document or window\n\t   * (i.e. in a node/non-DOM environment)\n\t   *\n\t   * Return a stubbed API instead\n\t   */\n\t  if (typeof document === 'undefined' || typeof window === 'undefined') {\n\t    return {\n\t      // always return \"initial\" because no interaction will ever be detected\n\t      ask: function ask() {\n\t        return 'initial';\n\t      },\n\n\t      // always return null\n\t      element: function element() {\n\t        return null;\n\t      },\n\n\t      // no-op\n\t      ignoreKeys: function ignoreKeys() {},\n\n\t      // no-op\n\t      specificKeys: function specificKeys() {},\n\n\t      // no-op\n\t      registerOnChange: function registerOnChange() {},\n\n\t      // no-op\n\t      unRegisterOnChange: function unRegisterOnChange() {}\n\t    };\n\t  }\n\n\t  /*\n\t   * variables\n\t   */\n\n\t  // cache document.documentElement\n\t  var docElem = document.documentElement;\n\n\t  // currently focused dom element\n\t  var currentElement = null;\n\n\t  // last used input type\n\t  var currentInput = 'initial';\n\n\t  // last used input intent\n\t  var currentIntent = currentInput;\n\n\t  // UNIX timestamp of current event\n\t  var currentTimestamp = Date.now();\n\n\t  // check for a `data-whatpersist` attribute on either the `html` or `body` elements, defaults to `true`\n\t  var shouldPersist = 'false';\n\n\t  // form input types\n\t  var formInputs = ['button', 'input', 'select', 'textarea'];\n\n\t  // empty array for holding callback functions\n\t  var functionList = [];\n\n\t  // list of modifier keys commonly used with the mouse and\n\t  // can be safely ignored to prevent false keyboard detection\n\t  var ignoreMap = [16, // shift\n\t  17, // control\n\t  18, // alt\n\t  91, // Windows key / left Apple cmd\n\t  93 // Windows menu / right Apple cmd\n\t  ];\n\n\t  var specificMap = [];\n\n\t  // mapping of events to input types\n\t  var inputMap = {\n\t    keydown: 'keyboard',\n\t    keyup: 'keyboard',\n\t    mousedown: 'mouse',\n\t    mousemove: 'mouse',\n\t    MSPointerDown: 'pointer',\n\t    MSPointerMove: 'pointer',\n\t    pointerdown: 'pointer',\n\t    pointermove: 'pointer',\n\t    touchstart: 'touch',\n\t    touchend: 'touch'\n\n\t    // boolean: true if the page is being scrolled\n\t  };var isScrolling = false;\n\n\t  // store current mouse position\n\t  var mousePos = {\n\t    x: null,\n\t    y: null\n\n\t    // map of IE 10 pointer events\n\t  };var pointerMap = {\n\t    2: 'touch',\n\t    3: 'touch', // treat pen like touch\n\t    4: 'mouse'\n\n\t    // check support for passive event listeners\n\t  };var supportsPassive = false;\n\n\t  try {\n\t    var opts = Object.defineProperty({}, 'passive', {\n\t      get: function get() {\n\t        supportsPassive = true;\n\t      }\n\t    });\n\n\t    window.addEventListener('test', null, opts);\n\t  } catch (e) {}\n\t  // fail silently\n\n\n\t  /*\n\t   * set up\n\t   */\n\n\t  var setUp = function setUp() {\n\t    // add correct mouse wheel event mapping to `inputMap`\n\t    inputMap[detectWheel()] = 'mouse';\n\n\t    addListeners();\n\t  };\n\n\t  /*\n\t   * events\n\t   */\n\n\t  var addListeners = function addListeners() {\n\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\n\t    // can only demonstrate potential, but not actual, interaction\n\t    // and are treated separately\n\t    var options = supportsPassive ? { passive: true } : false;\n\n\t    document.addEventListener('DOMContentLoaded', setPersist);\n\n\t    // pointer events (mouse, pen, touch)\n\t    if (window.PointerEvent) {\n\t      window.addEventListener('pointerdown', setInput);\n\t      window.addEventListener('pointermove', setIntent);\n\t    } else if (window.MSPointerEvent) {\n\t      window.addEventListener('MSPointerDown', setInput);\n\t      window.addEventListener('MSPointerMove', setIntent);\n\t    } else {\n\t      // mouse events\n\t      window.addEventListener('mousedown', setInput);\n\t      window.addEventListener('mousemove', setIntent);\n\n\t      // touch events\n\t      if ('ontouchstart' in window) {\n\t        window.addEventListener('touchstart', setInput, options);\n\t        window.addEventListener('touchend', setInput);\n\t      }\n\t    }\n\n\t    // mouse wheel\n\t    window.addEventListener(detectWheel(), setIntent, options);\n\n\t    // keyboard events\n\t    window.addEventListener('keydown', setInput);\n\t    window.addEventListener('keyup', setInput);\n\n\t    // focus events\n\t    window.addEventListener('focusin', setElement);\n\t    window.addEventListener('focusout', clearElement);\n\t  };\n\n\t  // checks if input persistence should happen and\n\t  // get saved state from session storage if true (defaults to `false`)\n\t  var setPersist = function setPersist() {\n\t    shouldPersist = !(docElem.getAttribute('data-whatpersist') || document.body.getAttribute('data-whatpersist') === 'false');\n\n\t    if (shouldPersist) {\n\t      // check for session variables and use if available\n\t      try {\n\t        if (window.sessionStorage.getItem('what-input')) {\n\t          currentInput = window.sessionStorage.getItem('what-input');\n\t        }\n\n\t        if (window.sessionStorage.getItem('what-intent')) {\n\t          currentIntent = window.sessionStorage.getItem('what-intent');\n\t        }\n\t      } catch (e) {\n\t        // fail silently\n\t      }\n\t    }\n\n\t    // always run these so at least `initial` state is set\n\t    doUpdate('input');\n\t    doUpdate('intent');\n\t  };\n\n\t  // checks conditions before updating new input\n\t  var setInput = function setInput(event) {\n\t    var eventKey = event.which;\n\t    var value = inputMap[event.type];\n\n\t    if (value === 'pointer') {\n\t      value = pointerType(event);\n\t    }\n\n\t    var ignoreMatch = !specificMap.length && ignoreMap.indexOf(eventKey) === -1;\n\n\t    var specificMatch = specificMap.length && specificMap.indexOf(eventKey) !== -1;\n\n\t    var shouldUpdate = value === 'keyboard' && eventKey && (ignoreMatch || specificMatch) || value === 'mouse' || value === 'touch';\n\n\t    // prevent touch detection from being overridden by event execution order\n\t    if (validateTouch(value)) {\n\t      shouldUpdate = false;\n\t    }\n\n\t    if (shouldUpdate && currentInput !== value) {\n\t      currentInput = value;\n\n\t      persistInput('input', currentInput);\n\t      doUpdate('input');\n\t    }\n\n\t    if (shouldUpdate && currentIntent !== value) {\n\t      // preserve intent for keyboard interaction with form fields\n\t      var activeElem = document.activeElement;\n\t      var notFormInput = activeElem && activeElem.nodeName && (formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1 || activeElem.nodeName.toLowerCase() === 'button' && !checkClosest(activeElem, 'form'));\n\n\t      if (notFormInput) {\n\t        currentIntent = value;\n\n\t        persistInput('intent', currentIntent);\n\t        doUpdate('intent');\n\t      }\n\t    }\n\t  };\n\n\t  // updates the doc and `inputTypes` array with new input\n\t  var doUpdate = function doUpdate(which) {\n\t    docElem.setAttribute('data-what' + which, which === 'input' ? currentInput : currentIntent);\n\n\t    fireFunctions(which);\n\t  };\n\n\t  // updates input intent for `mousemove` and `pointermove`\n\t  var setIntent = function setIntent(event) {\n\t    var value = inputMap[event.type];\n\n\t    if (value === 'pointer') {\n\t      value = pointerType(event);\n\t    }\n\n\t    // test to see if `mousemove` happened relative to the screen to detect scrolling versus mousemove\n\t    detectScrolling(event);\n\n\t    // only execute if scrolling isn't happening\n\t    if ((!isScrolling && !validateTouch(value) || isScrolling && event.type === 'wheel' || event.type === 'mousewheel' || event.type === 'DOMMouseScroll') && currentIntent !== value) {\n\t      currentIntent = value;\n\n\t      persistInput('intent', currentIntent);\n\t      doUpdate('intent');\n\t    }\n\t  };\n\n\t  var setElement = function setElement(event) {\n\t    if (!event.target.nodeName) {\n\t      // If nodeName is undefined, clear the element\n\t      // This can happen if click inside an <svg> element.\n\t      clearElement();\n\t      return;\n\t    }\n\n\t    currentElement = event.target.nodeName.toLowerCase();\n\t    docElem.setAttribute('data-whatelement', currentElement);\n\n\t    if (event.target.classList && event.target.classList.length) {\n\t      docElem.setAttribute('data-whatclasses', event.target.classList.toString().replace(' ', ','));\n\t    }\n\t  };\n\n\t  var clearElement = function clearElement() {\n\t    currentElement = null;\n\n\t    docElem.removeAttribute('data-whatelement');\n\t    docElem.removeAttribute('data-whatclasses');\n\t  };\n\n\t  var persistInput = function persistInput(which, value) {\n\t    if (shouldPersist) {\n\t      try {\n\t        window.sessionStorage.setItem('what-' + which, value);\n\t      } catch (e) {\n\t        // fail silently\n\t      }\n\t    }\n\t  };\n\n\t  /*\n\t   * utilities\n\t   */\n\n\t  var pointerType = function pointerType(event) {\n\t    if (typeof event.pointerType === 'number') {\n\t      return pointerMap[event.pointerType];\n\t    } else {\n\t      // treat pen like touch\n\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\n\t    }\n\t  };\n\n\t  // prevent touch detection from being overridden by event execution order\n\t  var validateTouch = function validateTouch(value) {\n\t    var timestamp = Date.now();\n\n\t    var touchIsValid = value === 'mouse' && currentInput === 'touch' && timestamp - currentTimestamp < 200;\n\n\t    currentTimestamp = timestamp;\n\n\t    return touchIsValid;\n\t  };\n\n\t  // detect version of mouse wheel event to use\n\t  // via https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\n\t  var detectWheel = function detectWheel() {\n\t    var wheelType = null;\n\n\t    // Modern browsers support \"wheel\"\n\t    if ('onwheel' in document.createElement('div')) {\n\t      wheelType = 'wheel';\n\t    } else {\n\t      // Webkit and IE support at least \"mousewheel\"\n\t      // or assume that remaining browsers are older Firefox\n\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n\t    }\n\n\t    return wheelType;\n\t  };\n\n\t  // runs callback functions\n\t  var fireFunctions = function fireFunctions(type) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].type === type) {\n\t        functionList[i].fn.call(undefined, type === 'input' ? currentInput : currentIntent);\n\t      }\n\t    }\n\t  };\n\n\t  // finds matching element in an object\n\t  var objPos = function objPos(match) {\n\t    for (var i = 0, len = functionList.length; i < len; i++) {\n\t      if (functionList[i].fn === match) {\n\t        return i;\n\t      }\n\t    }\n\t  };\n\n\t  var detectScrolling = function detectScrolling(event) {\n\t    if (mousePos.x !== event.screenX || mousePos.y !== event.screenY) {\n\t      isScrolling = false;\n\n\t      mousePos.x = event.screenX;\n\t      mousePos.y = event.screenY;\n\t    } else {\n\t      isScrolling = true;\n\t    }\n\t  };\n\n\t  // manual version of `closest()`\n\t  var checkClosest = function checkClosest(elem, tag) {\n\t    var ElementPrototype = window.Element.prototype;\n\n\t    if (!ElementPrototype.matches) {\n\t      ElementPrototype.matches = ElementPrototype.msMatchesSelector || ElementPrototype.webkitMatchesSelector;\n\t    }\n\n\t    if (!ElementPrototype.closest) {\n\t      do {\n\t        if (elem.matches(tag)) {\n\t          return elem;\n\t        }\n\n\t        elem = elem.parentElement || elem.parentNode;\n\t      } while (elem !== null && elem.nodeType === 1);\n\n\t      return null;\n\t    } else {\n\t      return elem.closest(tag);\n\t    }\n\t  };\n\n\t  /*\n\t   * init\n\t   */\n\n\t  // don't start script unless browser cuts the mustard\n\t  // (also passes if polyfills are used)\n\t  if ('addEventListener' in window && Array.prototype.indexOf) {\n\t    setUp();\n\t  }\n\n\t  /*\n\t   * api\n\t   */\n\n\t  return {\n\t    // returns string: the current input type\n\t    // opt: 'intent'|'input'\n\t    // 'input' (default): returns the same value as the `data-whatinput` attribute\n\t    // 'intent': includes `data-whatintent` value if it's different than `data-whatinput`\n\t    ask: function ask(opt) {\n\t      return opt === 'intent' ? currentIntent : currentInput;\n\t    },\n\n\t    // returns string: the currently focused element or null\n\t    element: function element() {\n\t      return currentElement;\n\t    },\n\n\t    // overwrites ignored keys with provided array\n\t    ignoreKeys: function ignoreKeys(arr) {\n\t      ignoreMap = arr;\n\t    },\n\n\t    // overwrites specific char keys to update on\n\t    specificKeys: function specificKeys(arr) {\n\t      specificMap = arr;\n\t    },\n\n\t    // attach functions to input and intent \"events\"\n\t    // funct: function to fire on change\n\t    // eventType: 'input'|'intent'\n\t    registerOnChange: function registerOnChange(fn, eventType) {\n\t      functionList.push({\n\t        fn: fn,\n\t        type: eventType || 'input'\n\t      });\n\t    },\n\n\t    unRegisterOnChange: function unRegisterOnChange(fn) {\n\t      var position = objPos(fn);\n\n\t      if (position || position === 0) {\n\t        functionList.splice(position, 1);\n\t      }\n\t    },\n\n\t    clearStorage: function clearStorage() {\n\t      window.sessionStorage.clear();\n\t    }\n\t  };\n\t}();\n\n/***/ })\n/******/ ])\n});\n;"]},"metadata":{},"sourceType":"script"}